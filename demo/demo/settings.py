"""
Django settings for demo project.

Generated by 'django-admin startproject' using Django 3.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import boto3
import logging.config
from os import environ
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*7y!rjq9@n-=g+hxcr(gg@*#2ut#v#8n=_^@p+-e#tz(bw4ub1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'demo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'demo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CloudWatch logging via Watchtower

CLOUDWATCH_AWS_ACCESS_KEY_ID = environ.get("CLOUDWATCH_AWS_ACCESS_KEY_ID")
CLOUDWATCH_AWS_SECRET_ACCESS_KEY = environ.get("CLOUDWATCH_AWS_SECRET_ACCESS_KEY")
CLOUDWATCH_AWS_REGION_NAME = environ.get("CLOUDWATCH_AWS_REGION_NAME", default="us-east-1")
CLOUDWATCH_LOG_GROUP = environ.get("CLOUDWATCH_LOG_GROUP", default="demo-log-group")
CLOUDWATCH_LOG_STREAM_NAME = environ.get("CLOUDWATCH_LOG_STREAM_NAME", default="demo-log-stream")
CLOUDWATCH_LOG_GROUP_RETENTION_DAYS = int(
    environ.get("CLOUDWATCH_LOG_GROUP_RETENTION_DAYS", default=1)
)

print("Configuring boto3 client for Watchtower")
cloudwatch_boto3_logs_client = boto3.client(
    "logs",
    aws_access_key_id=CLOUDWATCH_AWS_ACCESS_KEY_ID,
    aws_secret_access_key=CLOUDWATCH_AWS_SECRET_ACCESS_KEY,
    region_name=CLOUDWATCH_AWS_REGION_NAME,
)

print("Configuring logging")
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(asctime)s | %(levelname)s | "
            "%(process)s | "
            "%(filename)s:%(funcName)s:%(lineno)d | "
            "%(message)s"
        },
    },
    "handlers": {
        "console": {
            "level": environ.get("LOG_LEVEL", default="INFO"),
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "watchtower": {
            "level": environ.get("LOG_LEVEL", default="INFO"),
            "class": "watchtower.CloudWatchLogHandler",
            "boto3_client": cloudwatch_boto3_logs_client,
            "log_group_name": CLOUDWATCH_LOG_GROUP,
            "log_stream_name": CLOUDWATCH_LOG_STREAM_NAME,
            "log_group_retention_days": CLOUDWATCH_LOG_GROUP_RETENTION_DAYS,
            "formatter": "verbose",
            "use_queues": False,
        },
    },
    "loggers": {
        "": {
            "handlers": ["console", "watchtower"],
            "level": environ.get("LOG_LEVEL", default="DEBUG"),
        },
    },
}
logging.config.dictConfig(LOGGING)
